Displaying information on action: hilbert

Compute the multigraded Hilbert-Poincare series of the input
ideal. Use the -univariate option to get the univariate series.

The Hilbert-Poincare series of a monomial ideal is the sum of all
monomials not in the ideal. This sum can be written as a (finite)
rational function with (x1-1)(x2-1)...(xn-1) in the denominator,
assuming the variables of the ring are x1,x2,...,xn. This action
computes the polynomial in the numerator of this fraction.

The parameters accepted by hilbert are as follows.

 -iformat STRING   (default is autodetect)
   The format used to read the input. This action supports the formats:
     m2 cocoa4 singular monos newmonos 4ti2 null.
   The format "autodetect" instructs Frobby to guess the format.
   Type 'frobby help io' for more information on input formats.

 -oformat STRING   (default is input)
   The format used to write the output. This action supports the formats:
     m2 cocoa4 singular 4ti2 null count.
   The format "input" instructs Frobby to use the input format.
   Type 'frobby help io' for more information on output formats.

 -univariate [BOOL]   (default is off)
   Output a univariate polynomial by substituting t for each variable.

 -minimal [BOOL]   (default is off)
   Specifies that the input ideal is minimally generated by the given
   generators. Turning this on can improve performance, but if it is not
   true, Frobby may go into an infinite loop or produce incorrect results.

 -split STRING   (default is median)
   The split selection strategy to use. Options are maxlabel, minlabel,
   varlabel, minimum, median, maximum, mingen, indep and gcd. Optimization
   computations support the specialized strategy degree as well.

 -stats [BOOL]   (default is off)
   Print statistics on what the algorithm did.

 -independence [BOOL]   (default is on)
   Perform independence splits when possible.

 -simplify [BOOL]   (default is on)
   Perform simplification when possible.

 -debug [BOOL]   (default is off)
   Print what the algorithm does at each step.

 -canon [BOOL]   (default is off)
   Sort the output, including the variables, to get a canonical
   representation. This requires storing the entire output in memory, which
   can increase run time modestly and increase memory consumption greatly.

 -time [BOOL]   (default is off)
   Display and time each subcomputation.
