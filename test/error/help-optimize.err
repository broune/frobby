Displaying information on action: optimize

Solves an optimization program defined by the input monomial ideal I, and an
input vector of integers v. The optimization program is 

  maximize v * e such that e encodes an irreducible component of I,

where * is dot product and e is a vector of integers that uniquely encodes an
irreducible ideal by being the exponent vector of the product of the
minimal generators.

The input is composed of the ideal I in any format, optionally followed by the
entries of v in a space separated list. If v is not explicitly specified,
then every entry is assumed to 1, i.e. then v is of the form (1, ..., 1).

This action has options for displaying the optimal value or not and for
displaying zero, one or all of the optimal solutions. The algorithm used to
solve the optimization program is the Slice Algorithm using the bound
optimization. Thus this action also has options related to that.

The implementation (not the algorithm) is currently limited by the requirement
that all entries of v be non-negative. If this condition is not met, Frobby
falls back on the Slice Algorithm without the bound optimization, and thus ends up
computing all irreducible components of I.

The parameters accepted by optimize are as follows.

 -displayLevel INTEGER   (default is 0)
   Controls how many optimal solutions to display. If the value is 0 or 1,
   Frobby displays 0 or 1 solutions respectively. If the value is 2 or more,
   all solutions are displayed. The output is presented as generators of a
   monomial ideal.

 -displayValue [BOOL]   (default is on)
   Display the optimal value of the optimization program.

 -maxStandard [BOOL]   (default is off)
   Solve the optimization program for maximal standard monomials instead of
   for monomials representing irreducible components.

 -chopFirstAndSubtract [BOOL]   (default is off)
   Remove the first variable from generators, from the ring and from v, and
   subtract the value of the first entry of v from the reportedoptimal value.
   This is useful for Frobenius number calculations.

 -iformat STRING   (default is autodetect)
   The format used to read the input. This action supports the formats:
     m2 cocoa4 singular monos newmonos 4ti2 null.
   The format "autodetect" instructs Frobby to guess the format.
   Type 'frobby help io' for more information on input formats.

 -oformat STRING   (default is input)
   The format used to write the output. This action supports the formats:
     m2 cocoa4 singular monos newmonos 4ti2 null.
   The format "input" instructs Frobby to use the input format.
   Type 'frobby help io' for more information on output formats.

 -minimal [BOOL]   (default is off)
   Specifies that the input ideal is minimally generated by the given
   generators. Turning this on can improve performance, but if it is not
   true, Frobby may go into an infinite loop or produce incorrect results.

 -split STRING   (default is median)
   The split selection strategy to use. Options are maxlabel, minlabel,
   varlabel, minimum, median, maximum, mingen, indep and gcd. Frobenius
   computations support the specialized strategy frob as well.

 -stats [BOOL]   (default is off)
   Print statistics on what the algorithm did.

 -independence [BOOL]   (default is on)
   Perform independence splits when possible.

 -debug [BOOL]   (default is off)
   Print what the algorithm does at each step.

 -bound [BOOL]   (default is on)
   Use the bound optimization to solve optimization problems faster.

 -canon [BOOL]   (default is off)
   Sort the output, including the variables, to get a canonical
   representation. This requires storing the entire output in memory, which
   can increase run time modestly and increase memory consumption greatly.

 -time [BOOL]   (default is off)
   Display and time each subcomputation.
