Displaying information on action: alexdual

Compute the alexander dual of the input monomial ideal.

The computation is done using irreducible decomposition, which is why there are
a number of options related to that. See the help topic on irrdecom for
details.

The parameters accepted by alexdual are as follows.

 -canon [BOOL]   (default is off)
   Sort the output, including the variables, to get a canonical
   representation. This requires storing the entire output in memory, which
   can increase run time modestly and increase memory consumption greatly.

 -debug [BOOL]   (default is off)
   Print what the algorithm does at each step.

 -iformat STRING   (default is autodetect)
   The format used to read the input. This action supports the formats:
     4ti2 cocoa4 m2 monos newmonos null singular.
   The format "autodetect" instructs Frobby to guess the format.
   Type 'frobby help io' for more information on input formats.

 -independence [BOOL]   (default is on)
   Perform independence splits when possible.

 -minimal [BOOL]   (default is off)
   Specifies that the input ideal is minimally generated by the given
   generators. Turning this on can improve performance, but if it is not
   true then Frobby may go into an infinite loop or produce incorrect results.

 -oformat STRING   (default is input)
   The format used to write the output. This action supports the formats:
     4ti2 cocoa4 count m2 monos newmonos null singular.
   The format "input" instructs Frobby to use the input format.
   Type 'frobby help io' for more information on output formats.

 -simplify [BOOL]   (default is on)
   Perform simplification when possible.

 -split STRING   (default is median)
   The split selection strategy to use. Slice options are maxlabel, minlabel,
   varlabel, minimum, median, maximum, mingen, indep and gcd. Optimization
   computations support the specialized strategy degree as well.

 -stats [BOOL]   (default is off)
   Print statistics on what the algorithm did.

 -time [BOOL]   (default is off)
   Display and time each subcomputation.
