/* Frobby: Software for monomial ideal computations.
   Copyright (C) 2007 Bjarke Hammersholt Roune (www.broune.com)

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see http://www.gnu.org/licenses/.
*/

#include "standardProgramTests.h"

#include "../src/frobby.h"
#include "MyAsserts.h"
#include "MyConsumers.h"
#include "MyIdealCreators.h"
#include "MyIdeal.h"

void testStandardProgramNonNegative() {
  MyIdeal inputIdeal = make4_xx_yy_zz_t_xz_yz();
  Frobby::Ideal frobbyInputIdeal = convertToFrobbyIdeal(inputIdeal);

  MyIdealConsumer consumer;
  mpz_t grading[4];
  mpz_init_set_si(grading[0], 0);
  mpz_init_set_si(grading[1], 100);
  mpz_init_set_si(grading[2], 10000);
  mpz_init_set_str(grading[3], "1000000000000000000000000000000000000", 10);

  bool returnValue = 
	Frobby::solveStandardMonomialProgram(frobbyInputIdeal, grading, consumer);

  mpz_clear(grading[0]);
  mpz_clear(grading[1]);
  mpz_clear(grading[2]);
  mpz_clear(grading[3]);

  assertTrue(returnValue, "standard program non-negative ideal.");
  assertEqual(consumer.getIdeal(), make4_z(),
			  "standard program non-negative ideal");
}

void testStandardProgramNegative() {
  MyIdeal inputIdeal = make4_xx_yy_zz_t_xz_yz();
  Frobby::Ideal frobbyInputIdeal = convertToFrobbyIdeal(inputIdeal);

  MyIdealConsumer consumer;
  mpz_t grading[4];
  mpz_init_set_si(grading[0], 0);
  mpz_init_set_si(grading[1], 100);
  mpz_init_set_si(grading[2], -10000);
  mpz_init_set_str(grading[3], "1000000000000000000000000000000000000", 10);

  bool returnValue = 
	Frobby::solveStandardMonomialProgram(frobbyInputIdeal, grading, consumer);

  mpz_clear(grading[0]);
  mpz_clear(grading[1]);
  mpz_clear(grading[2]);
  mpz_clear(grading[3]);

  assertTrue(returnValue, "standard program non-negative ideal.");
  assertEqual(consumer.getIdeal(), make4_xy(),
			  "standard program negative ideal");
}

// Do a test of the edge case of computing the Alexander dual of the
// zero ideal in polynomial rings with 0, 1, 2 and 3 variables.
void testStandardProgramZeroIdeal() {
  mpz_t grading[3];
  mpz_init_set_si(grading[0], 0);
  mpz_init_set_si(grading[1], 100);
  mpz_init_set_si(grading[2], -10000);

  for (size_t varCount = 0; varCount <= 3; ++varCount) {
	Frobby::Ideal frobbyInputIdeal(varCount);

	MyIdealConsumer consumer;
	bool returnValue =
	  Frobby::solveStandardMonomialProgram
	  (frobbyInputIdeal, grading, consumer);

	if (varCount == 0) {
	  assertTrue(returnValue, "standard program zero (zero).");
	  assertEqual(consumer.getIdeal(), make_1(varCount),
				  "standard program zero (zero)");
	} else {
	  assertTrue(!returnValue, "standard program zero (more).");
	  assertEqual(consumer.getIdeal(), make_0(),
				  "standard program zero (more)");
	}
  }

  mpz_clear(grading[0]);
  mpz_clear(grading[1]);
  mpz_clear(grading[2]);
}

// Do a test of the edge case of copmuting the Alexander dual of the
// ideal generated by 1 in polynomial rings with 0, 1, 2 and 3
// variables.
void testStandardProgramOneIdeal() {
  mpz_t grading[3];
  mpz_init_set_si(grading[0], 0);
  mpz_init_set_si(grading[1], 100);
  mpz_init_set_si(grading[2], -10000);

  for (size_t varCount = 0; varCount <= 3; ++varCount) {
	MyIdeal inputIdeal = make_1(varCount);
	Frobby::Ideal frobbyInputIdeal = convertToFrobbyIdeal(inputIdeal);

	MyIdealConsumer consumer;
	bool returnValue =
	  Frobby::solveStandardMonomialProgram
	  (frobbyInputIdeal, grading, consumer);

	assertTrue(!returnValue, "standard program one.");
	assertEqual(consumer.getIdeal(), make_0(), "standard program one");
  }

  mpz_clear(grading[0]);
  mpz_clear(grading[1]);
  mpz_clear(grading[2]);
}

// Perform each of the tests above.
void testStandardProgram() {
  testStandardProgramNonNegative();
  testStandardProgramNegative();
  testStandardProgramZeroIdeal();
  testStandardProgramOneIdeal();
}
