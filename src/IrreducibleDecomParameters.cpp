/* Frobby: Software for monomial ideal computations.
   Copyright (C) 2007 Bjarke Hammersholt Roune (www.broune.com)

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see http://www.gnu.org/licenses/.
*/
#include "stdinc.h"
#include "IrreducibleDecomParameters.h"

IrreducibleDecomParameters::IrreducibleDecomParameters(bool exposeBoundParam):
  ParameterGroup("", ""),

  _exposeBoundParam(exposeBoundParam),

  _printDebug
  ("debug",
   "Print what the algorithm does at each step.",
   false),

  _printStatistics
  ("stats",
   "Print statistics on what the algorithm did.",
   false),

  _useBound
  ("bound",
   "Use the bound optimization when solving an IDP.",
   true),

  _useIndependence
  ("independence",
   "Perform independence splits when possible.",
   true),
  
  _minimal
  ("minimal",
   "Specifies that the input ideal is minimally generated by the given generators. Turning this on can improve performance, but if it is not true, the results will be unpredictable.",
   false),

  _split
  ("split",
   "The split selection strategy to use. Options are maxlabel, minlabel,\n"
   "varlabel, minimum, median, maximum, mingen, indep and gcd. Frobenius\n"
   "computations support the specialized strategy frob as well.",
   "median") {
  addParameter(&_minimal);
  addParameter(&_split);
  addParameter(&_printStatistics);
  addParameter(&_useIndependence);
  addParameter(&_printDebug);

  if (_exposeBoundParam)
	addParameter(&_useBound);
}

void IrreducibleDecomParameters::setUseIndependence(bool value) {
  _useIndependence = value;
}

void IrreducibleDecomParameters::setSplit(const string& split) {
  _split = split;
}

bool IrreducibleDecomParameters::getPrintDebug() const {
  return _printDebug;
}

bool IrreducibleDecomParameters::getPrintStatistics() const {
  return _printStatistics;
}

bool IrreducibleDecomParameters::getUseBound() const {
  return _useBound;
}

bool IrreducibleDecomParameters::getUseIndependence() const {
  return _useIndependence;
}

bool IrreducibleDecomParameters::getMinimal() const {
  return _minimal;
}

const string& IrreducibleDecomParameters::getSplit() const {
  return _split;
}
